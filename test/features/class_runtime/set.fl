class Node {
    fn init(k) {
        self.l = null;
        self.r = null;
        self.k = k;
    }
}

class Set {
    fn init() {
        self.tree = null;
    }

    fn insert(k) {
        if (self.tree == null) {
            self.tree = Node(k);
        } else {
            self.insert_node(self.tree, k);
        }
    }

    fn insert_node(node, k) {
        if (k == node.k) {
            return;
        }
        if (k > node.k) {
            if (node.r == null) {
                node.r = Node(k);
            } else {
                # NOTE: since this function is calling itself we do not need `self.insert_node`
                insert_node(node.r, k);
            }
        } else {
            if (node.l == null) {
                node.l = Node(k);
            } else {
                insert_node(node.l, k);
            }
        }
    }

    fn contains(k) {
        return self.contains_node(self.tree, k);
    }

    fn contains_node(node, k) {
        if (node == null) {
            return false;
        }
        if (k == node.k) {
            return true;
        }
        if (k > node.k) {
            return contains_node(node.r, k);
        } else {
            return contains_node(node.l, k);
        }
    }

    fn remove(k) {
        self.tree = self.remove_node(self.tree, k);
    }

    # return the mutated tree
    fn remove_node(node, k) {
        if (node == null) {
            return null;
        }
        if (k == node.k) {
            if (node.r == null) {
                return node.l;
            }
            if (node.l == null) {
                return node.r;
            }
            var left_max = self.max_node(node.l);
            node.k = left_max;
            node.l = remove_node(node.l, left_max);
            return node;
        } 
        if (k > node.k) {
            node.r = remove_node(node.r, k);
            return node;
        } else {
            node.l = remove_node(node.l, k);
            return node;
        }
    }

    # precondition: node != null
    fn max_node(node) {
        if (node.r == null) {
            return node.k;
        }
        return max_node(node.r);
    }

    # precondition: node != null
    fn min_node(node) {
        if (node.l == null) {
            return node.k;
        }
        return min_node(node.l);
    }

    fn insert_list(list) {
        fn insert_list_inner(i) {
            if (i == list.len()) {
                return;
            }
            self.insert(list[i]);
            insert_list_inner(i+1);
        }
        insert_list_inner(0);
    }

    fn remove_list(list) {
        fn remove_list_inner(i) {
            if (i == list.len()) {
                return;
            }
            self.remove(list[i]);
            remove_list_inner(i+1);
        }
        remove_list_inner(0);
    }
}

fn main() {
    var set = Set();
    set.insert_list([91, 77, 5, 93, 22, 27, 24, 22, 76, 68, 30, 59, 9, 86, 19, 98, 48, 13, 63, 68]);
    print set.contains(91); # true
    print set.contains(5);  # true
    print set.contains(48); # true
    print set.contains(30); # true
    print set.contains(68); # true
    print set.contains(0);  # false
    print set.contains(23); # false
    print set.contains(41); # false
    print set.contains(12); # false
    print set.contains(-1); # false
    set.remove_list([24, 22, 76, 68, 30]);
    print set.contains(93); # true
    print set.contains(98); # true
    print set.contains(13); # true
    print set.contains(5);  # true
    print set.contains(19); # true
    print set.contains(24); # false
    print set.contains(22); # false
    print set.contains(76); # false
    print set.contains(68); # false
    print set.contains(30); # false
}   